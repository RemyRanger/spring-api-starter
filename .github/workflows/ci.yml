name: CI/CD Pipeline
on:
  #Manually trigger workflow runs
  workflow_dispatch:
  #Trigger the workflow on push from the main branch
  push:
    branches:
      - main

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  #Generate API documentation
  generate:
    name: Generate API documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      id: git-checkhot
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
      
    - name: Build all bundles into single file + doc page html
      id: redoc-build
      shell: bash
      run: |
        npx @redocly/cli@latest bundle -o doc/dist/api.yaml --ext yaml && \
        npx @redocly/cli@latest build-docs doc/dist/api.yaml

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v1
      with:
        # Upload entire repository
        path: 'doc/'
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  #Build's job
  build:
    #Depends on sonar's job
    name: Build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Build the application using Maven
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml
      #Build the application using Maven
      - name: Upload JAR
        #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v2
        with:
          #Set artifact name
          name: artifact
          #From this path
          path: target/spring-api-starter-0.0.1-SNAPSHOT
